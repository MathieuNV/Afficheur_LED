#ifndef AFFICHEUR_H
#define AFFICHEUR_H

#include "SoftwareSerial.h"

#define STX           0x02
#define ETX           0x03
#define ENQ           0x05
#define ACK           0x06
#define ZERO          0x00

#define BUFF_MAX_SIZE 512

#define EAINVALID     1


class Afficheur 
{

  private:
  	  int m_identifiant;    //Numero de l'afficheur sur le reseau
      unsigned m_inc;       //Facteur incremental des trames
      
      char m_texte[50];     //Buffer contenant les caracteres du texte a afficher
      
      char m_txBuff[BUFF_MAX_SIZE];  //Buffer d'envoi des donnees serielles a envoyer a l'afficheur
      int  m_txLen;        //Longueur des datas dans ce buffer
      
      char m_csum;
 
      SoftwareSerial * m_serial;
      /*
 const uint8_t toto[180] PROGMEM  = {0x02, 0x05, 0x00, 0xA7, 0x01, 0x12, 0x46, 0x00, 0xA4, 0x04, 0x49, 0x00, 0x24, 0x01, 0x00, 0x0E,
             0x12, 0x00, 0x12, 0x08, 0x07, 0x18, 0x07, 0x3F, 0xDC, 0x84, 0x70, 0x80, 0x70, 0x85, 0xC3, 0x0F,
             0xC1, 0x3F, 0xC5, 0x01, 0x7E, 0x80, 0x7E, 0x80, 0xC0, 0x01, 0xCA, 0x3F, 0x7E, 0x1F, 0x7C, 0x00,
             0x38, 0x28, 0x00, 0x07, 0x30, 0x00, 0x30, 0x3E, 0xC1, 0x03, 0x03, 0x46, 0x44, 0x82, 0x71, 0x79,
             0x09, 0x09, 0x78, 0x70, 0x01, 0x07, 0x77, 0x79, 0x08, 0x18, 0x10, 0x80, 0x71, 0x79, 0x09, 0x09,
             0x78, 0x70, 0x01, 0x79, 0x78, 0x41, 0x01, 0x78, 0x78, 0x01, 0x79, 0x78, 0x41, 0x01, 0x78, 0x78,
             0x80, 0x71, 0x79, 0x29, 0x29, 0x68, 0x60, 0x00, 0x42, 0x16, 0x08, 0x06, 0x52, 0x00, 0x52, 0x25,
             0x6E, 0x4D, 0x1B, 0x63, 0x81, 0xC5, 0x12, 0x27, 0x77, 0x60, 0x21, 0xC6, 0x04, 0x07, 0xC2, 0x30,
             0x33, 0xC3, 0x01, 0x02, 0x04, 0x07, 0xC3, 0x02, 0x04, 0xA7, 0xC6, 0x26, 0x4C, 0x10, 0x10, 0x20,
             0xC6, 0x02, 0x04, 0x83, 0x43, 0xC5, 0x04, 0x07, 0xC3, 0x26, 0x4C, 0x10, 0x1F, 0xC0, 0x30, 0x33,
             0xC3, 0x01, 0xC4, 0x30, 0x33, 0xC3, 0x01, 0xC5, 0x26, 0x4C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x02, 0x03, 0x6E, 0x00};*/

/*
 const uint8_t  toto2[177] PROGMEM = {0x02, 0x05, 0x00, 0xA7, 0x01, 0x0A, 0x46, 0x00, 0xA4, 0x04, 0x49, 0x00, 0x9E, 0x03, 0x00, 0x0E,
              0x65, 0x00, 0x65, 0xD7, 0x06, 0x0F, 0x06, 0x0F, 0x06, 0x0F, 0x4F, 0x1D, 0xC4, 0x0F, 0x1E, 0x8C,
              0xC1, 0x01, 0xC1, 0x85, 0x70, 0x81, 0x60, 0x80, 0x60, 0x01, 0x61, 0xC1, 0x03, 0x7E, 0x8D, 0x78,
              0x41, 0x7C, 0x61, 0x4C, 0x61, 0x4C, 0x61, 0x4C, 0x61, 0x4C, 0x61, 0x4F, 0x60, 0x47, 0x40, 0xBF,
              0xB2, 0x7E, 0x01, 0xC0, 0x03, 0x5B, 0x43, 0x19, 0x43, 0x19, 0x43, 0x59, 0x41, 0x79, 0x80, 0x78,
              0x8C, 0xC3, 0x07, 0xC0, 0x03, 0x84, 0x60, 0x80, 0x60, 0x80, 0x60, 0x80, 0xC3, 0x03, 0xC0, 0xBF,
              0xB1, 0xD7, 0x06, 0x0F, 0x06, 0x0F, 0x06, 0x0F, 0x06, 0x0F, 0x83, 0x78, 0x80, 0x60, 0x87, 0x78,
              0x41, 0x7C, 0x61, 0x4C, 0x61, 0x4C, 0x61, 0x4C, 0x61, 0x4C, 0x61, 0x4F, 0x60, 0x47, 0x40, 0x87,
              0x78, 0x41, 0x7C, 0x61, 0x4C, 0x61, 0x4C, 0x61, 0x4C, 0x61, 0x4C, 0x61, 0x4F, 0x60, 0x47, 0x40,
              0x8B, 0x78, 0x09, 0x7C, 0x19, 0x4C, 0x19, 0x4C, 0x19, 0x4C, 0x19, 0x4C, 0x1F, 0x7C, 0x0F, 0x7C,
              0x89, 0x60, 0x3C, 0xC5, 0x1F, 0x7C, 0x83, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0xF0,
              0x00};
*/
/*
  const uint8_t toto3[295] PROGMEM  = {0x02, 0x05, 0x01, 0x17, 0x01, 0x18, 0x46, 0x01, 0x14, 0x04, 0x49, 0x00, 0x1c, 0x01, 0x00, 0x0e,
            0x0a, 0x00, 0x0a, 0x1e, 0x0c, 0x3f, 0x0e, 0xc1, 0x1f, 0x67, 0x0f, 0x67, 0x0f, 0x67, 0x0f, 0x67,
            0x0f, 0xc6, 0x3f, 0x7e, 0x1f, 0x7c, 0x00, 0x00, 0xb0, 0x0f, 0x00, 0x07, 0x5d, 0x00, 0xcb, 0x80,
            0xc7, 0x30, 0x1c, 0x30, 0xc7, 0x83, 0x71, 0x7b, 0x2d, 0x29, 0x68, 0x60, 0x01, 0x07, 0x77, 0x79,
            0x08, 0x18, 0x10, 0x82, 0x45, 0x65, 0x25, 0x27, 0x63, 0x60, 0x07, 0x67, 0x62, 0x04, 0x04, 0x02,
            0x04, 0x85, 0x71, 0x79, 0x29, 0x29, 0x68, 0x60, 0xa9, 0x7c, 0x7c, 0x50, 0x50, 0x70, 0x20, 0x83,
            0x45, 0x65, 0x25, 0x27, 0x63, 0x60, 0x07, 0x67, 0x62, 0x04, 0x04, 0x02, 0x04, 0xad, 0x7d, 0xc0,
            0x03, 0x03, 0x46, 0x44, 0x01, 0xc6, 0x10, 0x10, 0x1f, 0x0f, 0x85, 0x45, 0x65, 0x25, 0x27, 0x63,
            0x60, 0x04, 0x1f, 0x5f, 0x64, 0x20, 0x60, 0x40, 0x03, 0x47, 0x65, 0x25, 0x27, 0x23, 0x87, 0x45,
            0x65, 0x25, 0x27, 0x63, 0x60, 0x07, 0x47, 0x60, 0x20, 0x47, 0x67, 0x60, 0x03, 0x47, 0x64, 0x24,
            0x24, 0x20, 0x07, 0x67, 0x62, 0x04, 0x04, 0x02, 0x04, 0x85, 0x71, 0x79, 0x29, 0x29, 0x68, 0x60,
            0x01, 0x71, 0x78, 0x08, 0x11, 0x79, 0x78, 0x01, 0x09, 0x58, 0x70, 0x71, 0x59, 0x08, 0xad, 0x43,
            0x43, 0xac, 0x7d, 0xc0, 0x03, 0x03, 0x46, 0x44, 0x01, 0xc6, 0x08, 0x08, 0xc7, 0x80, 0xc8, 0x11,
            0x11, 0x70, 0x60, 0x01, 0xc6, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x42, 0x15, 0x08, 0x06, 0x52,
            0x00, 0x52, 0x25, 0x6e, 0x4d, 0x1b, 0x63, 0x81, 0xc5, 0x12, 0x27, 0x77, 0x60, 0x21, 0xc6, 0x04,
            0x07, 0xc2, 0x30, 0x33, 0xc3, 0x01, 0x02, 0x04, 0x07, 0xc3, 0x02, 0x04, 0xa7, 0xc6, 0x26, 0x4c,
            0x10, 0x10, 0x20, 0xc6, 0x02, 0x04, 0x83, 0x43, 0xc5, 0x04, 0x07, 0xc3, 0x26, 0x4c, 0x10, 0x1f,
            0xc0, 0x30, 0x33, 0xc3, 0x01, 0xc4, 0x30, 0x33, 0xc3, 0x01, 0xc5, 0x26, 0x4c, 0x10, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x02, 0x03, 0xda, 0x00};
*/
                   /*
      uint8_t toto[192] = {0x02, 0x05, 0x00, 0xA7, 0x01, 0x12, 0x46, 0x00, 0xA4, 0x04, 0x49, 0x00, 0x24, 0x01, 0x00, 0x0E,
                   0x12, 0x00, 0x12, 0x08, 0x07, 0x18, 0x07, 0x3F, 0xDC, 0x84, 0x70, 0x80, 0x70, 0x85, 0xC3, 0x0F,
                   0xC1, 0x3F, 0xC5, 0x01, 0x7E, 0x80, 0x7E, 0x80, 0xC0, 0x01, 0xCA, 0x3F, 0x7E, 0x1F, 0x7C, 0x00,
                   0x38, 0x28, 0x00, 0x07, 0x30, 0x00, 0x30, 0x3E, 0xC1, 0x03, 0x03, 0x46, 0x44, 0x82, 0x71, 0x79,
                   0x09, 0x09, 0x78, 0x70, 0x01, 0x07, 0x77, 0x79, 0x08, 0x18, 0x10, 0x80, 0x71, 0x79, 0x09, 0x09,
                   0x78, 0x70, 0x01, 0x79, 0x78, 0x41, 0x01, 0x78, 0x78, 0x01, 0x79, 0x78, 0x41, 0x01, 0x78, 0x78,
                   0x80, 0x71, 0x79, 0x29, 0x29, 0x68, 0x60, 0x00, 0x42, 0x16, 0x08, 0x06, 0x52, 0x00, 0x52, 0x25,
                   0x6E, 0x4D, 0x1B, 0x63, 0x81, 0xC5, 0x12, 0x27, 0x77, 0x60, 0x21, 0xC6, 0x04, 0x07, 0xC2, 0x30,
                   0x33, 0xC3, 0x01, 0x02, 0x04, 0x07, 0xC3, 0x02, 0x04, 0xA7, 0xC6, 0x26, 0x4C, 0x10, 0x10, 0x20,
                   0xC6, 0x02, 0x04, 0x83, 0x43, 0xC5, 0x04, 0x07, 0xC3, 0x26, 0x4C, 0x10, 0x1F, 0xC0, 0x30, 0x33,
                   0xC3, 0x01, 0xC4, 0x30, 0x33, 0xC3, 0x01, 0xC5, 0x26, 0x4C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x02, 0x03, 0x6E, 0x00, 0x02, 0x05, 0x00, 0x00, 0x01, 0x12, 0x73, 0x02, 0x03, 0x66, 0x00, 0xFF};*/
                  // 0x02, 0x06, 0x00, 0x02, 0x04, 0x43, 0x12, 0x53, 0x12, 0x51, 0x02, 0x03, 0x46, 0xFF, 0x00};
/*
 * 

TX:
2 5
0 33
1 
10
46

0 30
4
49

0 28 
5
5
7 
20
0 20


55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 

4C 10 0 0 0 0 0 

2 3
6C 0 




      uint8_t toto[207] = 
      {0x02, 0x05,
      0x00, 0xA7, // size
      0x01,       // disp
      0x12,       //inc
      0x46,       // 'F' Visualisation data, first packet
      
      0x00, 0xA4, // Offset of next page
      0x04,       // Duration (*0.5s)
      0x49,       //'I' Immediate display


      
      
      0x00, 0x24, // Nb of bytes until next zone (36)
      0x01,       // X coords
      0x00,       // Y coords
      0x0E,       // X height (14)
      0x12,       // width (18)
      0x00, 0x12, // 18 columns      
      
      0x08, 0x07, 0x18, 0x07, 0x3F, 0xDC, 0x84, 0x70, 0x80, 0x70, 0x85, 0xC3, 0x0F,
      0xC1, 0x3F, 0xC5, 0x01, 0x7E, 0x80, 0x7E, 0x80, 0xC0, 0x01, 0xCA, 0x3F, 0x7E, 0x1F, 0x7C,



      
      0x00, 0x38,   // Nb of bytes until next zone (56)
      0x28,         // X coords (40)
      0x00,         // Y coords (0)
      0x07,         // height (7)
      0x30,         // witdh (48)
      0x00, 0x30,   // 48 columns  
       
      0x3E, 0xC1, 0x03, 0x03, 0x46, 0x44, 0x82, 0x71, 0x79, 0x09, 0x09, 0x78, 0x70, 0x01, 0x07, 0x77,
      0x79, 0x08, 0x18, 0x10, 0x80, 0x71, 0x79, 0x09, 0x09, 0x78, 0x70, 0x01, 0x79, 0x78, 0x41, 0x01, 
      0x78, 0x78, 0x01, 0x79, 0x78, 0x41, 0x01, 0x78, 0x78, 0x80, 0x71, 0x79, 0x29, 0x29, 0x68, 0x60, 



      
      0x00, 0x42,   //  Nb of bytes until next zone (66)
      0x16,         // X coords (22)
      0x08,         // Y coords (8)
      0x06,         // hieght (6)
      0x52,         // witdh (82)
      0x00, 0x52,   // 82 colonnes
      
      0x25, 0x6E, 0x4D, 0x1B, 0x63, 0x81, 0xC5, 0x12, 0x27, 0x77, 0x60, 0x21, 0xC6, 0x04, 0x07, 0xC2, 
      0x30, 0x33, 0xC3, 0x01, 0x02, 0x04, 0x07, 0xC3, 0x02, 0x04, 0xA7, 0xC6, 0x26, 0x4C, 0x10, 0x10, 
      0x20, 0xC6, 0x02, 0x04, 0x83, 0x43, 0xC5, 0x04, 0x07, 0xC3, 0x26, 0x4C, 0x10, 0x1F, 0xC0, 0x30,
      0x33, 0xC3, 0x01, 0xC4, 0x30, 0x33, 0xC3, 0x01, 0xC5, 0x26, 
      
      0x4C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x02, 0x03, 
      0x6E, 0x00,


      
      0x02, 0x05, 
      0x00, 0x00,
      0x01, 
      0x12, 
      0x73, //'s'
      0x02, 0x03, 
      0x66, 
      0x00, 0xFF,


      
      0x02, 0x06, 
      0x00, 0x02,
      0x04, 
      0x43, //'C'
      0x12, 0x53, 0x12, 0x51,
      0x02, 0x03,
      0x46,
      0xFF, 0x00};
*/

      
  public:
      
      Afficheur(int identifiant, SoftwareSerial * serial);
      
      
      int cmd_dimmer(int luminosite); //Reglage de la luminosité du pavé de leds
      int cmd_modeTest();             //Mise en mode Test de l'afficheur
      int cmd_reset();              //Reset et clear de l'affichage
      int cmd_requestStatus();
      int cmd_toto();
      int cmd_toto2();
      int cmd_toto3();
      int cmd_sendText( int posX, int posY, int width, int policeSize);
      
      char calcul_csum(); //Calcul du checksum
      int envoiCmd();  //Transmission des donnees a l'afficheur
      
};

#endif
